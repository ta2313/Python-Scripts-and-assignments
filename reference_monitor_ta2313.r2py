#!/usr/bin/python
# -*- coding: utf-8 -*-

TYPE = 'type'
ARGS = 'args'
RETURN = 'return'
EXCP = 'exceptions'
TARGET = 'target'
FUNC = 'func'
OBJC = 'objc'


class ABFile:

    def __init__(self, filename, create):

    # globals

        mycontext['debug'] = False

    # local (per object) reference to the underlying file

        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

    # make the files and add 'SE' to the readat file...

        if create:
            self.Afile = openfile(self.Afn, create)
            self.Bfile = openfile(self.Bfn, create)
            self.Afile.writeat('SE', 0)
        else:
            self.Afile = openfile(self.Afn, False)
            self.Bfile = openfile(self.Bfn, False)

        self.Afile.lok = createlock()
        self.Bfile.lok = createlock()

    def writeat(self, data, offset):

        self.Bfile.lok.acquire(True)
        if offset > len(self.Bfile.readat(None, 0)):
            return None

        self.Bfile.writeat(data, offset)
        self.Bfile.lok.release()

    def readat(self, bytes, offset):
        self.Afile.lok.acquire(True)
        read = 0
        if offset > len(self.Afile.readat(None, 0)):
            return None
        read = self.Afile.readat(bytes, offset)
        self.Afile.lok.release()
        return read

    def close(self):
        backup_data = self.Afile.readat(None, 0)
        data = self.Bfile.readat(None, 0)
        afile = self.Afn

    # Check if the written file starts with "S" and ends with "E"

        if self.Bfile.readat(None, 0).startswith('S') \
            and self.Bfile.readat(None, 0).endswith('E') \
            and self.Afile.readat(None, 0).startswith('S') \
            and self.Afile.readat(None, 0).endswith('E'):
            self.Afile.close()
            self.Bfile.close()
            z = openfile(afile,True)
            z.writeat(data, 0)
        else:

            self.Afile.close()
            self.Bfile.close()


def ABopenfile(filename, create):
    return ABFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.

sec_file_def = {
    'obj-type': ABFile,
    'name': 'ABFile',
    'writeat': {
        'type': 'func',
        'args': (str, int),
        'exceptions': Exception,
        'return': (int, type(None)),
        'target': ABFile.writeat,
        },
    'readat': {
        'type': 'func',
        'args': ((int, type(None)), int),
        'exceptions': Exception,
        'return': str,
        'target': ABFile.readat,
        },
    'close': {
        'type': 'func',
        'args': None,
        'exceptions': None,
        'return': (bool, type(None)),
        'target': ABFile.close,
        },
    }

CHILD_CONTEXT_DEF['ABopenfile'] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: ABopenfile,
    }

# Execute the user code

secure_dispatch_module()
